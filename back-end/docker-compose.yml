services:
  # NGINX with local SSL certificates
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Use your local SSL folder
    depends_on:
      - app
      - ollama
    networks:
      - app_network
    restart: unless-stopped
  # ssl-gen:
  #   image: alpine:latest
  #   volumes:
  #     - ssl-certs:/certs
  #   command: >
  #     sh -c "
  #       apk add --no-cache openssl &&
  #       mkdir -p /certs &&
  #       if [ ! -f /certs/server.crt ] || [ ! -f /certs/server.key ]; then
  #         echo 'Generating SSL certificates...' &&
  #         openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  #           -keyout /certs/server.key \
  #           -out /certs/server.crt \
  #           -subj '/C=US/ST=Local/L=Local/O=Local/CN=localhost' &&
  #         chmod 644 /certs/server.crt &&
  #         chmod 600 /certs/server.key &&
  #         ls -la /certs/ &&
  #         echo 'SSL certificates generated successfully!'
  #       else
  #         echo 'SSL certificates already exist'
  #       fi
  #     "
  # ssl-gen:
  #   image: alpine/openssl
  #   volumes:
  #     - ssl-certs:/certs
  #   command: >
  #     sh -c "
  #       if [ ! -f /certs/server.crt ]; then
  #         echo 'Generating SSL certificates...';
  #         openssl req -x509 -nodes -days 365 -newkey rsa:2048 
  #           -keyout /certs/server.key 
  #           -out /certs/server.crt 
  #           -subj '/CN=localhost';
  #         echo 'SSL ready!';
  #       fi
  #     "
 # NGINX Reverse Proxy
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ssl-certs:/etc/nginx/ssl:ro
  #   depends_on:
  #     - ssl-gen
  #     - app          # ‚Üê Your existing app service
  #     - ollama
  #   networks:
  #     - app_network

  postgres:
    image: ankane/pgvector:v0.5.0
    environment:
      POSTGRES_DB: golang_crud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    # ports:
      # - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]

  app:
    build: .
    # ports:
    #   - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:password123@postgres:5432/golang_crud?sslmode=disable
      - OLLAMA_URL=http://ollama:11434
      - GIN_MODE=debug
      - LOG_LEVEL=debug
    networks:
      - app_network
    restart: unless-stopped

  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    # ports:
    #   - "11434:11434"
    networks:
      - app_network
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama

volumes:
  postgres_data:
  ollama_data:
  ssl-certs:

networks:
  app_network:
    driver: bridge
