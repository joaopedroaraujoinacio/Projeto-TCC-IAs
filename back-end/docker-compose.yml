services:
  postgres:
    image: ankane/pgvector:v0.5.0
    environment:
      POSTGRES_DB: golang_crud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]

  app:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      # ollama:
      #   condition: service_healthy
    environment:
      - DATABASE_URL=postgres://postgres:password123@postgres:5432/golang_crud?sslmode=disable
      - OLLAMA_URL=http://ollama:11434
      - GIN_MODE=debug
      - LOG_LEVEL=debug
    networks:
      - app_network
    restart: unless-stopped

  ollama:
      image: ollama/ollama
      ports:
        - "11434:11434"
      environment:
        - OLLAMA_HOST=0.0.0.0:11434
      networks:
        - app_network
      restart: unless-stopped
      volumes:
        - ollama_data:/root/.ollama

  ollama-setup:
      image: ollama/ollama
      depends_on:
        - ollama
      networks:
        - app_network
      volumes:
        - ollama_data:/root/.ollama
      environment:
        - OLLAMA_HOST=http://ollama:11434
      command: >
        sh -c "
        echo 'Waiting for Ollama server to be ready...' &&
        sleep 15 &&
        until ollama list >/dev/null 2>&1; do echo 'Waiting for Ollama...'; sleep 5; done &&
        echo 'Pulling nomic-embed-text model...' &&
        ollama pull nomic-embed-text &&
        echo 'Model setup complete!'
        "
      restart: "no"

volumes:
  postgres_data:
  ollama_data:
networks:
  app_network:
    driver: bridge
